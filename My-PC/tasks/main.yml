---
# tasks file for My-PC
########################
#         UPDATES      #
########################

- name: Debian Like | Update Cache
  apt: update_cache=yes force_apt_get=yes cache_valid_time=3600
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"

- name: Debian Like | Update System
  apt: name="*" state=latest
  when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
########################
# Instalacao de Pacotes#
########################
- name: Debian Like | Install common packages
  apt: 
    name: '{{ common_packages_debian }}' 
    install_recommends: yes
    state: latest
    when: ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
########################
 # Configurando o Shell
########################
- name: Check if Oh-My-Zsh is installed
  stat:
    path: "{{ user_home }}/.oh-my-zsh"
  register: ohmyzsh
  become_user: "{{ ansible_user_id }}"

- name: Install Oh-My-Zsh
  ansible.builtin.get_url:
    url: "{{ oh_my_zsh_install_script }}"
    dest: "/tmp/install_oh_my_zsh.sh"
    mode: '0755'
  when: ohmyzsh.stat.exists == false

- name: Execute Oh-My-Zsh installation script
  ansible.builtin.command:
    cmd: sh /tmp/install_oh_my_zsh.sh
  become_user: "{{ ansible_user_id }}"
  when: ohmyzsh.stat.exists == false

- name: Change default shell to ZSH
  ansible.builtin.user:
    name: "{{ ansible_user_id }}"
    shell: /bin/zsh
  when: ohmyzsh.stat.exists == false

- name: Set ZSH theme to Agnoster
  ansible.builtin.lineinfile:
    path: "{{ user_home }}/.zshrc"
    regexp: '^ZSH_THEME=".*"'
    line: "ZSH_THEME=\"{{ zsh_theme }}\""
    create: yes
  become_user: "{{ ansible_user_id }}"

- name: Create ZSH completion directory
  ansible.builtin.file:
    path: "{{ user_home }}/.oh-my-zsh/completions"
    state: directory
    mode: '0755'
  become_user: "{{ ansible_user_id }}"

- name: Add autoload to compinit in .zshrc
  ansible.builtin.lineinfile:
    path: "{{ user_home }}/.zshrc"
    line: 'autoload -U compinit && compinit'
    insertafter: EOF
  become_user: "{{ ansible_user_id }}"
#######################################################

- name: Installing AWS CLI via pip3
  become: true
  pip:
    name: awscli
    executable: pip3

#######################################################
- name: Install Google Signing Key
  apt_key:
    url: 'https://dl.google.com/linux/linux_signing_key.pub'
    state: present

- name: Add Google Chrome Repository
  apt_repository:
    repo: 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main'
    state: present
    filename: google-chrome

- name: Install Google Chrome (Latest Version)
  apt:
    name: google-chrome-stable
    state: latest
#######################################################
########################
# Preparando Vagrant   #
########################
- name: Determine the latest Vagrant version
  uri:
    url: https://releases.hashicorp.com/vagrant/index.json
    return_content: yes
  register: vagrant_releases
  become: false

- name: Set Vagrant latest version variable
  set_fact:
    latest_vagrant_version: "{{ (vagrant_releases.json.versions.keys() | list | sort(version_compare) | reverse)[0] }}"

- name: Check if the latest Vagrant is installed
  command: "{{ vagrant_install_path }}/vagrant --version"
  register: vagrant_installed
  ignore_errors: true

- name: Download the latest Vagrant version
  get_url:
    url: "https://releases.hashicorp.com/vagrant/{{ latest_vagrant_version }}/vagrant_{{ latest_vagrant_version }}_linux_amd64.zip"
    dest: "/tmp/vagrant_latest.zip"
    mode: '0755'
  when: vagrant_installed.stdout is not search(latest_vagrant_version)

- name: Extract the latest Vagrant version
  unarchive:
    src: "/tmp/vagrant_latest.zip"
    dest: "{{ vagrant_install_path }}"
    remote_src: yes
  when: vagrant_installed.stdout is not search(latest_vagrant_version)

########################
# Preparando Terraform #
########################
- name: Determine the latest Terraform version
  uri:
    url: https://releases.hashicorp.com/terraform/index.json
    return_content: yes
  register: terraform_releases
  become: false

- name: Set Terraform latest version variable
  set_fact:
    latest_terraform_version: "{{ (terraform_releases.json.versions.keys() | list | sort(version_compare) | reverse)[0] }}"

- name: Check if the latest Terraform is installed
  command: "{{ terraform_install_path }}/terraform version"
  register: terraform_installed
  ignore_errors: true

- name: Download the latest Terraform version
  get_url:
    url: "https://releases.hashicorp.com/terraform/{{ latest_terraform_version }}/terraform_{{ latest_terraform_version }}_linux_amd64.zip"
    dest: "/tmp/terraform_latest.zip"
    mode: '0755'
  when: terraform_installed.stdout is not search(latest_terraform_version)

- name: Extract the latest Terraform version
  unarchive:
    src: "/tmp/terraform_latest.zip"
    dest: "{{ terraform_install_path }}"
    remote_src: yes
    creates: "{{ terraform_install_path }}/terraform"
  when: terraform_installed.stdout is not search(latest_terraform_version)

- name: Verify Terraform installation
  command: "{{ terraform_install_path }}/terraform version"
  register: terraform_version_output

- name: Display Terraform version
  debug:
    msg: "{{ terraform_version_output.stdout }}"

########################
#   FIM Terraform      #
########################

# Instalando Vault
- name: Installing Vault 1.8.1
  become: true
  unarchive:
    src: 'https://releases.hashicorp.com/vault/1.8.1/vault_1.8.1_linux_amd64.zip'
    dest: /usr/local/bin
    remote_src: yes

# Installing gomplate
- name: Installing gomplate 3.9.0
  become: true
  get_url:    
    url: 'https://github.com/hairyhenderson/gomplate/releases/download/v3.9.0/gomplate_linux-amd64'
    dest: /usr/local/bin/gomplate
    mode: 755

# Install Google Cloud SDK
- name: Install Google Cloud SDK Key
  become: true
  apt_key:
    url: 'https://packages.cloud.google.com/apt/doc/apt-key.gpg'
    state: present

- name: Install Google Cloud SDK Repository
  become: true
  apt_repository:
    repo: 'deb [arch=amd64] https://packages.cloud.google.com/apt cloud-sdk main'
    state: present
    filename: google-cloud-sdk

- name: Install Google Cloud SDK
  become: true
  apt:
    name: google-cloud-sd
          
# Install Microsoft
- name: Install Microsoft Key
  become: true
  apt_key:
    url: 'https://packages.microsoft.com/keys/microsoft.asc'
    state: present
- name: Install VSCode Repository
  become: true
  apt_repository:
    repo: 'deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main'
    state: present
    filename: vscode
- name: Install Visual Studio Code
  become: true
  apt:
    name: code
- name: Install Virtual Studio Code Extensions
  shell:
    cmd: code --install-extension '{{ item }}' 
  loop: 
    - ms-python.python
    - ms-azuretools.vscode-docker
    - bbenoist.vagrant
    - hashicorp.terraform
    - gruntfuggly.todo-tree
    - njpwerner.autodocstring
    - eamodio.gitlens
    - redhat.ansible

# Install Docker
- name: Install Docker Key (Ubuntu/Debian)
  apt_key:
    url: "{{ docker_gpg_key }}"
    state: present
  when: ansible_os_family == "Debian"

- name: Install Docker Repository (Ubuntu/Debian)
  apt_repository:
    repo: "{{ docker_repo_ubuntu }}"
    state: present
    filename: docker-ce
  when: ansible_os_family == "Debian"

- name: Install Docker CE (Ubuntu/Debian)
  apt:
    name: docker-ce
    state: latest
  when: ansible_os_family == "Debian"

 # Add similar tasks for Red Hat/CentOS using yum module

- name: Add existing user to Docker group
  user:
    name: "{{ ansible_user_id }}"
    groups: docker
    append: yes

- name: Install Docker-Compose
  get_url:
    url: "{{ docker_compose_url }}"
    dest: "/usr/local/bin/docker-compose"
    mode: '0755'

- name: Install Docker and Docker-Compose Bash Completion (Ubuntu/Debian)
  get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
    mode: '0644'
  loop:
    - { url: "https://raw.githubusercontent.com/docker/machine/v0.16.0/contrib/completion/bash/docker-machine.bash", dest: "/etc/bash_completion.d/docker-machine" }
    - { url: "https://raw.githubusercontent.com/docker/compose/{{ docker_compose_version }}/contrib/completion/bash/docker-compose", dest: "/etc/bash_completion.d/docker-compose" }
  when: ansible_os_family == "Debian"

- name: Ensure .zshrc exists for Docker-Compose and Docker Machine Zsh Completion
  file:
    path: "/home/{{ ansible_user_id }}/.zshrc"
    state: touch
    mode: '0644'

- name: Add Docker-Compose and Docker Machine to Zsh plugins
  lineinfile:
    path: "/home/{{ ansible_user_id }}/.zshrc"
    regexp: '^plugins=\('
    line: 'plugins=(git docker docker-compose)'
    backrefs: yes
        
# Installing Kubectl
- name: Check if kubectl is installed
  command: "{{ kubectl_dest }} version --client=true"
  register: kubectl_installed
  ignore_errors: true

- name: Download kubectl
  get_url:
    url: "{{ kubectl_url }}"
    dest: "{{ kubectl_dest }}"
    mode: '0755'
  when: kubectl_installed is failed

- name: Clone kubectx and kubens repository
  git:
    repo: "{{ kubectx_repo }}"
    dest: "{{ kubectx_dest }}"
    clone: yes
    update: yes

- name: Create symlinks for kubectx and kubens
  file:
    src: "{{ kubectx_dest }}/{{ item }}"
    dest: "/usr/local/bin/{{ item }}"
    state: link
  loop:
    - kubectx
    - kubens
  notify: Refresh Shell

- name: Ensure .zshrc exists for ZSH Completion
  file:
    path: "/home/{{ ansible_user_id }}/.zshrc"
    state: touch
    mode: '0644'

- name: Create symlinks for ZSH completions
  file:
    src: "{{ kubectx_dest }}/completion/{{ item }}"
    dest: "/home/{{ ansible_user_id }}/.oh-my-zsh/completions/_{{ item }}"
    state: link
  loop:
    - kubectx.zsh
    - kubens.zsh

handlers:
  - name: Refresh Shell
    shell: exec $SHELL
    
# Install Golang 
- name: Adding Longsleep/Golang Backports Repository
  become: true
  apt_repository:
    repo: 'ppa:longsleep/golang-backports'

- name: Install Golang 
  become: true
  apt:
    name: golang-go
          
# OPTIONAL:
#  - PEEK - Lightweight Screen Recorder that can export as GIF
#  - OBS-STUDIO - Screen Recorder and Casting Software 
#  - Brave Browser - Secure web browser
#  - Ulauncher - Application Launcher

#  Adding Peek
- name: Adding Peek Repository
  become: true
  apt_repository:
    repo: 'ppa:peek-developers/stable'

- name: Install Peek
  become: true
  apt:
    name: peek
# Install obsproject 

- name: Install obsproject Ubuntu Repo
  become: true
  apt_repository:
    repo: 'ppa:obsproject/obs-studio'
- name: Install obs Studio
  become: true
  apt:
    name: obs-studi

# Install Brave
- name: Install Brave Key
  become: true
  apt_key:
    url: 'https://brave-browser-apt-release.s3.brave.com/brave-core.asc'
    state: present
- name: Install Brave Repository
  become: true
  apt_repository:
    repo: 'deb [arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main'
    state: present
    filename: brave
- name: Install Brave Browser
  become: true
  apt:
    name: brave-browse

